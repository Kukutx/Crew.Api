// <auto-generated />
using System;
using Crew.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Crew.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251018143614_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Crew.Domain.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<Guid?>("OwnerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_user_id");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_chats");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_Chat_EventId");

                    b.HasIndex("Type", "OwnerUserId")
                        .HasDatabaseName("ix_chats_type_owner_user_id");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.ChatMember", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<long?>("LastReadMessageSeq")
                        .HasColumnType("bigint")
                        .HasColumnName("last_read_message_seq");

                    b.Property<DateTimeOffset?>("LeftAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("left_at");

                    b.Property<DateTimeOffset?>("MutedUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("muted_until");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("ChatId", "UserId")
                        .HasName("pk_chat_members");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("IX_ChatMember_ChatId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ChatMember_UserId");

                    b.ToTable("chat_members", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BodyText")
                        .HasColumnType("text")
                        .HasColumnName("body_text");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Kind")
                        .HasColumnType("integer")
                        .HasColumnName("kind");

                    b.Property<string>("MetaJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("meta_json");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<long>("Seq")
                        .HasColumnType("bigint")
                        .HasColumnName("seq");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_chat_messages");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("IX_ChatMessage_ChatId");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_chat_messages_sender_id");

                    b.HasIndex("ChatId", "Seq")
                        .IsUnique()
                        .IsDescending(false, true)
                        .HasDatabaseName("IX_ChatMessage_ChatId_Seq");

                    b.ToTable("chat_messages", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.ChatMessageAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("content_type");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("storage_key");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_chat_message_attachments");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("ix_chat_message_attachments_message_id");

                    b.ToTable("chat_message_attachments", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.ChatMessageReaction", b =>
                {
                    b.Property<long>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Emoji")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("emoji");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("MessageId", "UserId", "Emoji")
                        .HasName("pk_chat_message_reactions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_chat_message_reactions_user_id");

                    b.ToTable("chat_message_reactions", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.EventMetrics", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<int>("LikesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("likes_count");

                    b.Property<int>("RegistrationsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("registrations_count");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.HasKey("EventId")
                        .HasName("pk_event_metrics");

                    b.ToTable("event_metrics", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.EventSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("Seq")
                        .HasColumnType("integer")
                        .HasColumnName("seq");

                    b.Property<Point>("Waypoint")
                        .IsRequired()
                        .HasColumnType("geometry (Point, 4326)")
                        .HasColumnName("waypoint");

                    b.HasKey("Id")
                        .HasName("pk_event_segments");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_event_segments_event_id");

                    b.ToTable("event_segments", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.EventTag", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("EventId", "TagId")
                        .HasName("pk_event_tags");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_event_tags_tag_id");

                    b.ToTable("event_tags", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.Moment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("city");

                    b.Property<string>("Content")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("content");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("country");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("cover_image_url");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_moments");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_moments_event_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_moments_user_id");

                    b.ToTable("moments", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.MomentComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("MomentId")
                        .HasColumnType("uuid")
                        .HasColumnName("moment_id");

                    b.HasKey("Id")
                        .HasName("pk_moment_comments");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_moment_comments_author_id");

                    b.HasIndex("MomentId")
                        .HasDatabaseName("ix_moment_comments_moment_id");

                    b.ToTable("moment_comments", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.MomentImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("MomentId")
                        .HasColumnType("uuid")
                        .HasColumnName("moment_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_moment_images");

                    b.HasIndex("MomentId")
                        .HasDatabaseName("ix_moment_images_moment_id");

                    b.ToTable("moment_images", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTimeOffset>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<DateTimeOffset?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.Registration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_registrations");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_registrations_user_id");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_registrations_event_id_user_id");

                    b.ToTable("registrations", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("reason");

                    b.Property<Guid>("ReporterId")
                        .HasColumnType("uuid")
                        .HasColumnName("reporter_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid")
                        .HasColumnName("target_id");

                    b.Property<int>("TargetType")
                        .HasColumnType("integer")
                        .HasColumnName("target_type");

                    b.HasKey("Id")
                        .HasName("pk_reports");

                    b.HasIndex("TargetId")
                        .HasDatabaseName("ix_reports_target_id");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.RoadTripEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Point>("EndPoint")
                        .HasColumnType("geometry (Point, 4326)")
                        .HasColumnName("end_point");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry (Point, 4326)")
                        .HasColumnName("location");

                    b.Property<int?>("MaxParticipants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(7)
                        .HasColumnName("max_participants");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("RoutePolyline")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("route_polyline");

                    b.Property<Point>("StartPoint")
                        .IsRequired()
                        .HasColumnType("geometry (Point, 4326)")
                        .HasColumnName("start_point");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("pk_road_trip_events");

                    b.ToTable("road_trip_events", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("Name", "Category")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_name_category");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Bio")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("bio");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("firebase_uid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("role");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("FirebaseUid")
                        .IsUnique()
                        .HasDatabaseName("ix_users_firebase_uid");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.UserActivityHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<DateTimeOffset>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("role");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_activity_histories");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_user_activity_histories_event_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_activity_histories_user_id");

                    b.ToTable("user_activity_histories", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.UserFollow", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid")
                        .HasColumnName("follower_id");

                    b.Property<Guid>("FollowingId")
                        .HasColumnType("uuid")
                        .HasColumnName("following_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("FollowerId", "FollowingId")
                        .HasName("pk_user_follows");

                    b.HasIndex("FollowingId")
                        .HasDatabaseName("ix_user_follows_following_id");

                    b.ToTable("user_follows", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.UserGuestbookEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.HasKey("Id")
                        .HasName("pk_user_guestbook_entries");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_user_guestbook_entries_author_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_user_guestbook_entries_owner_id");

                    b.ToTable("user_guestbook_entries", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.UserTag", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("UserId", "TagId")
                        .HasName("pk_user_tags");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_user_tags_tag_id");

                    b.ToTable("user_tags", (string)null);
                });

            modelBuilder.Entity("Crew.Domain.Entities.ChatMember", b =>
                {
                    b.HasOne("Crew.Domain.Entities.Chat", "Chat")
                        .WithMany("Members")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_members_chats_chat_id");

                    b.HasOne("Crew.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_members_users_user_id");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crew.Domain.Entities.ChatMessage", b =>
                {
                    b.HasOne("Crew.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_messages_chats_chat_id");

                    b.HasOne("Crew.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_messages_users_sender_id");

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Crew.Domain.Entities.ChatMessageAttachment", b =>
                {
                    b.HasOne("Crew.Domain.Entities.ChatMessage", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_message_attachments_chat_messages_message_id");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Crew.Domain.Entities.ChatMessageReaction", b =>
                {
                    b.HasOne("Crew.Domain.Entities.ChatMessage", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_message_reactions_chat_messages_message_id");

                    b.HasOne("Crew.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_message_reactions_users_user_id");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crew.Domain.Entities.EventMetrics", b =>
                {
                    b.HasOne("Crew.Domain.Entities.RoadTripEvent", "Event")
                        .WithOne("Metrics")
                        .HasForeignKey("Crew.Domain.Entities.EventMetrics", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_metrics_road_trip_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Crew.Domain.Entities.EventSegment", b =>
                {
                    b.HasOne("Crew.Domain.Entities.RoadTripEvent", "Event")
                        .WithMany("Segments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_segments_road_trip_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Crew.Domain.Entities.EventTag", b =>
                {
                    b.HasOne("Crew.Domain.Entities.RoadTripEvent", "Event")
                        .WithMany("Tags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_tags_road_trip_events_event_id");

                    b.HasOne("Crew.Domain.Entities.Tag", "Tag")
                        .WithMany("EventTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_tags_tags_tag_id");

                    b.Navigation("Event");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Crew.Domain.Entities.Moment", b =>
                {
                    b.HasOne("Crew.Domain.Entities.RoadTripEvent", "Event")
                        .WithMany("Moments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_moments_road_trip_events_event_id");

                    b.HasOne("Crew.Domain.Entities.User", "User")
                        .WithMany("Moments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_moments_users_user_id");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crew.Domain.Entities.MomentComment", b =>
                {
                    b.HasOne("Crew.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_moment_comments_users_author_id");

                    b.HasOne("Crew.Domain.Entities.Moment", "Moment")
                        .WithMany("Comments")
                        .HasForeignKey("MomentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_moment_comments_moments_moment_id");

                    b.Navigation("Author");

                    b.Navigation("Moment");
                });

            modelBuilder.Entity("Crew.Domain.Entities.MomentImage", b =>
                {
                    b.HasOne("Crew.Domain.Entities.Moment", "Moment")
                        .WithMany("Images")
                        .HasForeignKey("MomentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_moment_images_moments_moment_id");

                    b.Navigation("Moment");
                });

            modelBuilder.Entity("Crew.Domain.Entities.Registration", b =>
                {
                    b.HasOne("Crew.Domain.Entities.RoadTripEvent", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registrations_road_trip_events_event_id");

                    b.HasOne("Crew.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registrations_users_user_id");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crew.Domain.Entities.UserActivityHistory", b =>
                {
                    b.HasOne("Crew.Domain.Entities.RoadTripEvent", "Event")
                        .WithMany("ActivityHistory")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_activity_histories_road_trip_events_event_id");

                    b.HasOne("Crew.Domain.Entities.User", "User")
                        .WithMany("ActivityHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_activity_histories_users_user_id");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crew.Domain.Entities.UserFollow", b =>
                {
                    b.HasOne("Crew.Domain.Entities.User", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_follows_users_follower_id");

                    b.HasOne("Crew.Domain.Entities.User", "Following")
                        .WithMany("Followers")
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_follows_users_following_id");

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("Crew.Domain.Entities.UserGuestbookEntry", b =>
                {
                    b.HasOne("Crew.Domain.Entities.User", "Author")
                        .WithMany("AuthoredGuestbookEntries")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_guestbook_entries_users_author_id");

                    b.HasOne("Crew.Domain.Entities.User", "Owner")
                        .WithMany("GuestbookEntries")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_guestbook_entries_users_owner_id");

                    b.Navigation("Author");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Crew.Domain.Entities.UserTag", b =>
                {
                    b.HasOne("Crew.Domain.Entities.Tag", "Tag")
                        .WithMany("UserTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tags_tags_tag_id");

                    b.HasOne("Crew.Domain.Entities.User", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tags_users_user_id");

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crew.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Crew.Domain.Entities.ChatMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Crew.Domain.Entities.Moment", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Crew.Domain.Entities.RoadTripEvent", b =>
                {
                    b.Navigation("ActivityHistory");

                    b.Navigation("Metrics");

                    b.Navigation("Moments");

                    b.Navigation("Registrations");

                    b.Navigation("Segments");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Crew.Domain.Entities.Tag", b =>
                {
                    b.Navigation("EventTags");

                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("Crew.Domain.Entities.User", b =>
                {
                    b.Navigation("ActivityHistory");

                    b.Navigation("AuthoredGuestbookEntries");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("GuestbookEntries");

                    b.Navigation("Moments");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
